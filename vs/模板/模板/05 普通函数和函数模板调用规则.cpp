/*2023-8-22*/

// 普通函数和函数模板调用规则
//1、如果 函数模板 和 普通函数都能够实现，优先调用 普通函数
//2、可以通过 空模板参数列表 来强制调用 函数模板
//3、函数模板也可以发生 重载
//4、如果函数模板能产生更好的匹配，优先调用 函数模板

//既然提供了函数模板，最好不要提供普通函数，否则容易出现二义性


#include <iostream>

using namespace std;

//普通函数
void myPrint(int a, int b){
	cout << "调用普通函数！" << endl;
}


//函数模板
template<typename T>
void myPrint(T a, T b){
	cout << "调用函数模板！" << endl;
}

template<typename T>
void myPrint(T a, T b, T c){
	cout << "调用重载的函数模板！" << endl;
}



void test01(){
	//1、如果 函数模板 和 普通函数都能够实现，优先调用 普通函数
	//都符合要求且没有发生 隐式转换
	//这种情况，如果普通函数只声明 编译器会报错，而不是调用函数模板
	//myPrint(100, 200);

	//2、可以通过 空模板参数列表 来强制调用 函数模板
	//<>这个里面什么数据类型都不写 为空模板
	//myPrint<>(100, 200);

	//3、函数模板也可以发生 重载
	//myPrint<>(100, 200 ,300);

	//4、如果函数模板能产生更好的匹配，优先调用 函数模板
	//此时如果在调用普通函数 则会发生一次隐式转换 而模板函数不用
	myPrint('a' , 'c');


}

int main(){

	test01();

	system("pause");
	return 0;
}