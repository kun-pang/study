/*2023―7―17*/
/*数组  */

/*一维数组
数组是一个连续的内存空间
定义方式：
			数据类型  数组名[数组长度]；
			数据类型  数组名[数组长度] = {值1，值2....};			如果在初始化的时候，未全部赋值完，系统会用0来填充
			数据类型  数组名[] = {值1，值2....};
*/

/*冒泡排序
1.比较相邻的元素。如果第一个比第二个大，就交换他们两个。
2.对每干对相邻元素做同样的工作，执行完毕后，找到第一-个最大值。
3. 重复以上的步骤，每次比较次数-1，直到不需要比较
*/



#include <iostream>

using namespace std;

int main6(){
	//一维数组
	int arr[] = {1,2,3,4,5};
	
	//获取一维数组长度
	cout << "一维数组长度:" << sizeof(arr) << "字节" << endl;
	cout << "单个数组的长度:" << sizeof(arr[0]) << "字节" <<endl;
	cout << "数组个数：" << sizeof(arr) /  sizeof(arr[0]) << "个" << endl;
	
	//获取数组首地址
	cout << "数组首地址：" << arr << endl;
	cout << "数组第一个元素的地址：" << &arr[0] << endl;
	cout << "数组第二个元素的地址：" << &arr[1] << endl;
	
	//数组名是一个常量，不能进行赋值
	//arr = 100;
	cout << endl;


	//冒泡排序		排序总轮数 = 元素个数 - 1      每轮对比次数 = 元素个数 - 轮数 - 1
	//定义数组
	int arr0[] = {2,1,3,5,6,0,4,7,9,8};

	//打印排序前的数组
	cout << "打印排序前的数组:" << endl;
	for(int i = 0; i < 9; i++){
		cout << arr0[i] << "  ";
	}

	//进行冒泡排序
	//控制轮数
	for(int i = 0; i < (9 - 1); i++){
		//控制每轮的比较次数
		for(int j = 0; j < (9 - 1 - i); j++){
			//比较相邻的元素。如果第一个比第二个大，就交换他们两个
			if(arr0[j] > arr0[j+1]){
				int t;
				t = arr0[j];
				arr0[j] = arr0[j+1];
				arr0[j+1] = t;
			}else{
				continue;
			}
		}
	}

	//打印排序后的数组
	cout << "打印排序后的数组:" << endl;
	for(int i = 0; i < 9; i++){
		cout << arr0[i] << "  ";
	}

	system("pause");

	return 0;
}